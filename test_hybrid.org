#+TITLE: Problem 1 test_hybrid and hybrid_main tests
#+TESTY: PREFIX="prob1"
#+TESTY: USE_VALGRIND=1

* test_hybrid midnight-set
#+TESTY: program='./test_hybrid midnight-set'

#+BEGIN_SRC text
{
    // Tests whether set_tod_from_secs() sets
    // the time correctly for input SECS
    int SECS = 0;               // arg to set_tod()
    tod_t tod = {
      .hours   = -3,
      .minutes = -5,
      .seconds = -7,
      .ispm    = -1,
    };                          // should be changed
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    int ret = set_tod_from_secs( SECS, &tod );

    printf("returned: %d\n",ret);
    test_print_tod( tod );
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT);
    printf("\n");
}
returned: 0
tod = {
  .hours   = 12,
  .minutes = 0,
  .seconds = 0,
  .ispm    = 0,
}
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
#+END_SRC

* test_hybrid midnight-bits
#+TESTY: program='./test_hybrid midnight-bits'

#+BEGIN_SRC text
{
    // Tests whether set_display_bits_from_tod() sets
    // the the specified integer bits correctly from
    // a tod struct
    tod_t tod = {
      .hours   = 12,
      .minutes = 0,
      .seconds = 0,
      .ispm    = 0,
    };
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    // bits in array to check for correct movX
    int sentinels[] = {0xAABBCCDD, -1, 0xAABBCCDD};
    int *bits = &sentinels[1];
    int ret = set_display_bits_from_tod(tod, bits);
    
    printf("returned: %d\n",ret);
    printf("bits:               ");
    showbits( *bits ); printf("\n");
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
    printf("sentinels[0]: 0x%08X  // may change if\n",sentinels[0]); 
    printf("sentinels[2]: 0x%08X  // wrong movX used\n",sentinels[2]); 
}
returned: 0
bits:               00010000 11010110 11011111 10111111 
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
sentinels[0]: 0xAABBCCDD  // may change if
sentinels[2]: 0xAABBCCDD  // wrong movX used
#+END_SRC

* test_hybrid midnight-update
#+TESTY: program='./test_hybrid midnight-update'

#+BEGIN_SRC text
{
    // Tests whether clock_update() correctly changes
    // CLOCK_DISPLAY_PORT to target bits based on
    // TIME_OF_DAY_SEC
    TIME_OF_DAY_SEC  = 0;
    CLOCK_DISPLAY_PORT = -1;

    int ret = clock_update();   // updates DISPLAY

    printf("returned: %d\n",ret);
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
}
returned: 0
TIME_OF_DAY_SEC: 0
CLOCK_DISPLAY_PORT: 00010000 11010110 11011111 10111111 
#+END_SRC

* test_hybrid after-midnight-set
#+TESTY: program='./test_hybrid after-midnight-set'

#+BEGIN_SRC text
{
    // Tests whether set_tod_from_secs() sets
    // the time correctly for input SECS
    int SECS = 101;             // arg to set_tod()
    tod_t tod = {
      .hours   = -3,
      .minutes = -5,
      .seconds = -7,
      .ispm    = -1,
    };                          // should be changed
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    int ret = set_tod_from_secs( SECS, &tod );

    printf("returned: %d\n",ret);
    test_print_tod( tod );
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT);
    printf("\n");
}
returned: 0
tod = {
  .hours   = 12,
  .minutes = 1,
  .seconds = 41,
  .ispm    = 0,
}
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
#+END_SRC

* test_hybrid after-midnight-bits
#+TESTY: program='./test_hybrid after-midnight-bits'

#+BEGIN_SRC text
{
    // Tests whether set_display_bits_from_tod() sets
    // the the specified integer bits correctly from
    // a tod struct
    tod_t tod = {
      .hours   = 12,
      .minutes = 1,
      .seconds = 41,
      .ispm    = 0,
    };
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    // bits in array to check for correct movX
    int sentinels[] = {0xAABBCCDD, -1, 0xAABBCCDD};
    int *bits = &sentinels[1];
    int ret = set_display_bits_from_tod(tod, bits);
    
    printf("returned: %d\n",ret);
    printf("bits:               ");
    showbits( *bits ); printf("\n");
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
    printf("sentinels[0]: 0x%08X  // may change if\n",sentinels[0]); 
    printf("sentinels[2]: 0x%08X  // wrong movX used\n",sentinels[2]); 
}
returned: 0
bits:               00010000 11010110 11011111 10000110 
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
sentinels[0]: 0xAABBCCDD  // may change if
sentinels[2]: 0xAABBCCDD  // wrong movX used
#+END_SRC

* test_hybrid after-midnight-update
#+TESTY: program='./test_hybrid after-midnight-update'

#+BEGIN_SRC text
{
    // Tests whether clock_update() correctly changes
    // CLOCK_DISPLAY_PORT to target bits based on
    // TIME_OF_DAY_SEC
    TIME_OF_DAY_SEC  =   101;
    CLOCK_DISPLAY_PORT = -1;

    int ret = clock_update();   // updates DISPLAY

    printf("returned: %d\n",ret);
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
}
returned: 0
TIME_OF_DAY_SEC: 101
CLOCK_DISPLAY_PORT: 00010000 11010110 11011111 10000110 
#+END_SRC

* test_hybrid after-1am-set
#+TESTY: program='./test_hybrid after-1am-set'

#+BEGIN_SRC text
{
    // Tests whether set_tod_from_secs() sets
    // the time correctly for input SECS
    int SECS = 4170;            // arg to set_tod()
    tod_t tod = {
      .hours   = -3,
      .minutes = -5,
      .seconds = -7,
      .ispm    = -1,
    };                          // should be changed
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    int ret = set_tod_from_secs( SECS, &tod );

    printf("returned: %d\n",ret);
    test_print_tod( tod );
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT);
    printf("\n");
}
returned: 0
tod = {
  .hours   = 1,
  .minutes = 9,
  .seconds = 30,
  .ispm    = 0,
}
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
#+END_SRC

* After 1am bits/update
** test_hybrid after-1am-bits
#+TESTY: program='./test_hybrid after-1am-bits'

#+BEGIN_SRC text
{
    // Tests whether set_display_bits_from_tod() sets
    // the the specified integer bits correctly from
    // a tod struct
    tod_t tod = {
      .hours   = 1,
      .minutes = 9,
      .seconds = 30,
      .ispm    = 0,
    };
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    // bits in array to check for correct movX
    int sentinels[] = {0xAABBCCDD, -1, 0xAABBCCDD};
    int *bits = &sentinels[1];
    int ret = set_display_bits_from_tod(tod, bits);
    
    printf("returned: %d\n",ret);
    printf("bits:               ");
    showbits( *bits ); printf("\n");
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
    printf("sentinels[0]: 0x%08X  // may change if\n",sentinels[0]); 
    printf("sentinels[2]: 0x%08X  // wrong movX used\n",sentinels[2]); 
}
returned: 0
bits:               00010000 00000001 10011111 11101111 
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
sentinels[0]: 0xAABBCCDD  // may change if
sentinels[2]: 0xAABBCCDD  // wrong movX used
#+END_SRC

** test_hybrid after-1am-update
#+TESTY: program='./test_hybrid after-1am-update'

#+BEGIN_SRC text
{
    // Tests whether clock_update() correctly changes
    // CLOCK_DISPLAY_PORT to target bits based on
    // TIME_OF_DAY_SEC
    TIME_OF_DAY_SEC  =   4170;
    CLOCK_DISPLAY_PORT = -1;

    int ret = clock_update();   // updates DISPLAY

    printf("returned: %d\n",ret);
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
}
returned: 0
TIME_OF_DAY_SEC: 4170
CLOCK_DISPLAY_PORT: 00010000 00000001 10011111 11101111 
#+END_SRC

* Nearly Noon
** test_hybrid nearly-noon-set
#+TESTY: program='./test_hybrid nearly-noon-set'

#+BEGIN_SRC text
{
    // Tests whether set_tod_from_secs() sets
    // the time correctly for input SECS
    int SECS = 43199;           // arg to set_tod()
    tod_t tod = {
      .hours   = -3,
      .minutes = -5,
      .seconds = -7,
      .ispm    = -1,
    };                          // should be changed
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    int ret = set_tod_from_secs( SECS, &tod );

    printf("returned: %d\n",ret);
    test_print_tod( tod );
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT);
    printf("\n");
}
returned: 0
tod = {
  .hours   = 11,
  .minutes = 59,
  .seconds = 59,
  .ispm    = 0,
}
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
#+END_SRC

** test_hybrid nearly-noon-bits
#+TESTY: program='./test_hybrid nearly-noon-bits'

#+BEGIN_SRC text
{
    // Tests whether set_display_bits_from_tod() sets
    // the the specified integer bits correctly from
    // a tod struct
    tod_t tod = {
      .hours   = 11,
      .minutes = 59,
      .seconds = 59,
      .ispm    = 0,
    };
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    // bits in array to check for correct movX
    int sentinels[] = {0xAABBCCDD, -1, 0xAABBCCDD};
    int *bits = &sentinels[1];
    int ret = set_display_bits_from_tod(tod, bits);
    
    printf("returned: %d\n",ret);
    printf("bits:               ");
    showbits( *bits ); printf("\n");
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
    printf("sentinels[0]: 0x%08X  // may change if\n",sentinels[0]); 
    printf("sentinels[2]: 0x%08X  // wrong movX used\n",sentinels[2]); 
}
returned: 0
bits:               00010000 11000001 10110110 11101111 
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
sentinels[0]: 0xAABBCCDD  // may change if
sentinels[2]: 0xAABBCCDD  // wrong movX used
#+END_SRC

** test_hybrid nearly-noon-update
#+TESTY: program='./test_hybrid nearly-noon-update'

#+BEGIN_SRC text
{
    // Tests whether clock_update() correctly changes
    // CLOCK_DISPLAY_PORT to target bits based on
    // TIME_OF_DAY_SEC
    TIME_OF_DAY_SEC  =   43199;
    CLOCK_DISPLAY_PORT = -1;

    int ret = clock_update();   // updates DISPLAY

    printf("returned: %d\n",ret);
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
}
returned: 0
TIME_OF_DAY_SEC: 43199
CLOCK_DISPLAY_PORT: 00010000 11000001 10110110 11101111 
#+END_SRC

* Is Noon
** test_hybrid is-noon-set
#+TESTY: program='./test_hybrid is-noon-set'

#+BEGIN_SRC text
{
    // Tests whether set_tod_from_secs() sets
    // the time correctly for input SECS
    int SECS = 43200;           // arg to set_tod()
    tod_t tod = {
      .hours   = -3,
      .minutes = -5,
      .seconds = -7,
      .ispm    = -1,
    };                          // should be changed
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    int ret = set_tod_from_secs( SECS, &tod );

    printf("returned: %d\n",ret);
    test_print_tod( tod );
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT);
    printf("\n");
}
returned: 0
tod = {
  .hours   = 12,
  .minutes = 0,
  .seconds = 0,
  .ispm    = 1,
}
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
#+END_SRC

** test_hybrid is-noon-bits
#+TESTY: program='./test_hybrid is-noon-bits'

#+BEGIN_SRC text
{
    // Tests whether set_display_bits_from_tod() sets
    // the the specified integer bits correctly from
    // a tod struct
    tod_t tod = {
      .hours   = 12,
      .minutes = 0,
      .seconds = 0,
      .ispm    = 1,
    };
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    // bits in array to check for correct movX
    int sentinels[] = {0xAABBCCDD, -1, 0xAABBCCDD};
    int *bits = &sentinels[1];
    int ret = set_display_bits_from_tod(tod, bits);
    
    printf("returned: %d\n",ret);
    printf("bits:               ");
    showbits( *bits ); printf("\n");
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
    printf("sentinels[0]: 0x%08X  // may change if\n",sentinels[0]); 
    printf("sentinels[2]: 0x%08X  // wrong movX used\n",sentinels[2]); 
}
returned: 0
bits:               00100000 11010110 11011111 10111111 
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
sentinels[0]: 0xAABBCCDD  // may change if
sentinels[2]: 0xAABBCCDD  // wrong movX used
#+END_SRC

** test_hybrid is-noon-update
#+TESTY: program='./test_hybrid is-noon-update'

#+BEGIN_SRC text
{
    // Tests whether clock_update() correctly changes
    // CLOCK_DISPLAY_PORT to target bits based on
    // TIME_OF_DAY_SEC
    TIME_OF_DAY_SEC  =   43200;
    CLOCK_DISPLAY_PORT = -1;

    int ret = clock_update();   // updates DISPLAY

    printf("returned: %d\n",ret);
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
}
returned: 0
TIME_OF_DAY_SEC: 43200
CLOCK_DISPLAY_PORT: 00100000 11010110 11011111 10111111 
#+END_SRC

* After 1pm
** test_hybrid after-1pm-set
#+TESTY: program='./test_hybrid after-1pm-set'

#+BEGIN_SRC text
{
    // Tests whether set_tod_from_secs() sets
    // the time correctly for input SECS
    int SECS = 47089;           // arg to set_tod()
    tod_t tod = {
      .hours   = -3,
      .minutes = -5,
      .seconds = -7,
      .ispm    = -1,
    };                          // should be changed
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    int ret = set_tod_from_secs( SECS, &tod );

    printf("returned: %d\n",ret);
    test_print_tod( tod );
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT);
    printf("\n");
}
returned: 0
tod = {
  .hours   = 1,
  .minutes = 4,
  .seconds = 49,
  .ispm    = 1,
}
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
#+END_SRC

** test_hybrid after-1pm-bits
#+TESTY: program='./test_hybrid after-1pm-bits'

#+BEGIN_SRC text
{
    // Tests whether set_display_bits_from_tod() sets
    // the the specified integer bits correctly from
    // a tod struct
    tod_t tod = {
      .hours   = 1,
      .minutes = 4,
      .seconds = 49,
      .ispm    = 1,
    };
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    // bits in array to check for correct movX
    int sentinels[] = {0xAABBCCDD, -1, 0xAABBCCDD};
    int *bits = &sentinels[1];
    int ret = set_display_bits_from_tod(tod, bits);
    
    printf("returned: %d\n",ret);
    printf("bits:               ");
    showbits( *bits ); printf("\n");
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
    printf("sentinels[0]: 0x%08X  // may change if\n",sentinels[0]); 
    printf("sentinels[2]: 0x%08X  // wrong movX used\n",sentinels[2]); 
}
returned: 0
bits:               00100000 00000001 10011111 11100110 
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
sentinels[0]: 0xAABBCCDD  // may change if
sentinels[2]: 0xAABBCCDD  // wrong movX used
#+END_SRC

** test_hybrid after-1pm-update
#+TESTY: program='./test_hybrid after-1pm-update'

#+BEGIN_SRC text
{
    // Tests whether clock_update() correctly changes
    // CLOCK_DISPLAY_PORT to target bits based on
    // TIME_OF_DAY_SEC
    TIME_OF_DAY_SEC  =   47089;
    CLOCK_DISPLAY_PORT = -1;

    int ret = clock_update();   // updates DISPLAY

    printf("returned: %d\n",ret);
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
}
returned: 0
TIME_OF_DAY_SEC: 47089
CLOCK_DISPLAY_PORT: 00100000 00000001 10011111 11100110 
#+END_SRC

* After 6pm
** test_hybrid after-six-pm-set
#+TESTY: program='./test_hybrid after-six-pm-set'

#+BEGIN_SRC text
{
    // Tests whether set_tod_from_secs() sets
    // the time correctly for input SECS
    int SECS = 67089;           // arg to set_tod()
    tod_t tod = {
      .hours   = -3,
      .minutes = -5,
      .seconds = -7,
      .ispm    = -1,
    };                          // should be changed
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    int ret = set_tod_from_secs( SECS, &tod );

    printf("returned: %d\n",ret);
    test_print_tod( tod );
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT);
    printf("\n");
}
returned: 0
tod = {
  .hours   = 6,
  .minutes = 38,
  .seconds = 9,
  .ispm    = 1,
}
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
#+END_SRC

** test_hybrid after-six-pm-bits
#+TESTY: program='./test_hybrid after-six-pm-bits'

#+BEGIN_SRC text
{
    // Tests whether set_display_bits_from_tod() sets
    // the the specified integer bits correctly from
    // a tod struct
    tod_t tod = {
      .hours   = 6,
      .minutes = 38,
      .seconds = 9,
      .ispm    = 1,
    };
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    // bits in array to check for correct movX
    int sentinels[] = {0xAABBCCDD, -1, 0xAABBCCDD};
    int *bits = &sentinels[1];
    int ret = set_display_bits_from_tod(tod, bits);
    
    printf("returned: %d\n",ret);
    printf("bits:               ");
    showbits( *bits ); printf("\n");
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
    printf("sentinels[0]: 0x%08X  // may change if\n",sentinels[0]); 
    printf("sentinels[2]: 0x%08X  // wrong movX used\n",sentinels[2]); 
}
returned: 0
bits:               00100000 00011111 01100111 11111111 
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
sentinels[0]: 0xAABBCCDD  // may change if
sentinels[2]: 0xAABBCCDD  // wrong movX used
#+END_SRC

** test_hybrid after-six-pm-update
#+TESTY: program='./test_hybrid after-six-pm-update'

#+BEGIN_SRC text
{
    // Tests whether clock_update() correctly changes
    // CLOCK_DISPLAY_PORT to target bits based on
    // TIME_OF_DAY_SEC
    TIME_OF_DAY_SEC  =   67089;
    CLOCK_DISPLAY_PORT = -1;

    int ret = clock_update();   // updates DISPLAY

    printf("returned: %d\n",ret);
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
}
returned: 0
TIME_OF_DAY_SEC: 67089
CLOCK_DISPLAY_PORT: 00100000 00011111 01100111 11111111 
#+END_SRC

* Nearly Midnight
** test_hybrid nearly-midnight-set
#+TESTY: program='./test_hybrid nearly-midnight-set'

#+BEGIN_SRC text
{
    // Tests whether set_tod_from_secs() sets
    // the time correctly for input SECS
    int SECS = 86399;           // arg to set_tod()
    tod_t tod = {
      .hours   = -3,
      .minutes = -5,
      .seconds = -7,
      .ispm    = -1,
    };                          // should be changed
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    int ret = set_tod_from_secs( SECS, &tod );

    printf("returned: %d\n",ret);
    test_print_tod( tod );
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT);
    printf("\n");
}
returned: 0
tod = {
  .hours   = 11,
  .minutes = 59,
  .seconds = 59,
  .ispm    = 1,
}
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
#+END_SRC

** test_hybrid nearly-midnight-bits
#+TESTY: program='./test_hybrid nearly-midnight-bits'

#+BEGIN_SRC text
{
    // Tests whether set_display_bits_from_tod() sets
    // the the specified integer bits correctly from
    // a tod struct
    tod_t tod = {
      .hours   = 11,
      .minutes = 59,
      .seconds = 59,
      .ispm    = 1,
    };
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    // bits in array to check for correct movX
    int sentinels[] = {0xAABBCCDD, -1, 0xAABBCCDD};
    int *bits = &sentinels[1];
    int ret = set_display_bits_from_tod(tod, bits);
    
    printf("returned: %d\n",ret);
    printf("bits:               ");
    showbits( *bits ); printf("\n");
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
    printf("sentinels[0]: 0x%08X  // may change if\n",sentinels[0]); 
    printf("sentinels[2]: 0x%08X  // wrong movX used\n",sentinels[2]); 
}
returned: 0
bits:               00100000 11000001 10110110 11101111 
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
sentinels[0]: 0xAABBCCDD  // may change if
sentinels[2]: 0xAABBCCDD  // wrong movX used
#+END_SRC

** test_hybrid nearly-midnight-update
#+TESTY: program='./test_hybrid nearly-midnight-update'

#+BEGIN_SRC text
{
    // Tests whether clock_update() correctly changes
    // CLOCK_DISPLAY_PORT to target bits based on
    // TIME_OF_DAY_SEC
    TIME_OF_DAY_SEC  =   86399;
    CLOCK_DISPLAY_PORT = -1;

    int ret = clock_update();   // updates DISPLAY

    printf("returned: %d\n",ret);
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
}
returned: 0
TIME_OF_DAY_SEC: 86399
CLOCK_DISPLAY_PORT: 00100000 11000001 10110110 11101111 
#+END_SRC

* Afternoon
** test_hybrid afternoon-bits
#+TESTY: program='./test_hybrid afternoon-bits'

#+BEGIN_SRC text
{
    // Tests whether set_display_bits_from_tod() sets
    // the the specified integer bits correctly from
    // a tod struct
    tod_t tod = {
      .hours   = 12,
      .minutes = 52,
      .seconds = 28,
      .ispm    = 1,
    };
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    // bits in array to check for correct movX
    int sentinels[] = {0xAABBCCDD, -1, 0xAABBCCDD};
    int *bits = &sentinels[1];
    int ret = set_display_bits_from_tod(tod, bits);
    
    printf("returned: %d\n",ret);
    printf("bits:               ");
    showbits( *bits ); printf("\n");
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
    printf("sentinels[0]: 0x%08X  // may change if\n",sentinels[0]); 
    printf("sentinels[2]: 0x%08X  // wrong movX used\n",sentinels[2]); 
}
returned: 0
bits:               00100000 11010110 11110110 11011011 
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
sentinels[0]: 0xAABBCCDD  // may change if
sentinels[2]: 0xAABBCCDD  // wrong movX used
#+END_SRC

** test_hybrid afternoon-update
#+TESTY: program='./test_hybrid afternoon-update'

#+BEGIN_SRC text
{
    // Tests whether clock_update() correctly changes
    // CLOCK_DISPLAY_PORT to target bits based on
    // TIME_OF_DAY_SEC
    TIME_OF_DAY_SEC  =   46348;
    CLOCK_DISPLAY_PORT = -1;

    int ret = clock_update();   // updates DISPLAY

    printf("returned: %d\n",ret);
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
}
returned: 0
TIME_OF_DAY_SEC: 46348
CLOCK_DISPLAY_PORT: 00100000 11010110 11110110 11011011 
#+END_SRC

* Error Conditions
** test_hybrid seconds-negative
#+TESTY: program='./test_hybrid seconds-negative'

#+BEGIN_SRC text
{
    // Tests whether the set_tod_from_secs() function
    // returns an error if passed an out-of-range
    // seconds. Should return 1 and not change the tod.
    int SECS = -128;            // arg to set_tod()
    tod_t tod = {
      .hours   = -3,
      .minutes = -5,
      .seconds = -7,
      .ispm    = -1,
    };                          // SHOULD NOT CHANGE
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    int ret = set_tod_from_secs( SECS, &tod );

    printf("returned: %d\n",ret);
    test_print_tod( tod );
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT);
    printf("\n");

}
returned: 1
tod = {
  .hours   = -3,
  .minutes = -5,
  .seconds = -7,
  .ispm    = -1,
}
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
#+END_SRC

** test_hybrid seconds-too-big
#+TESTY: program='./test_hybrid seconds-too-big'

#+BEGIN_SRC text
{
    // Tests whether the set_tod_from_secs() function
    // returns an error if passed an out-of-range
    // seconds. Should return 1 and not change the tod.
    int SECS = 90000;           // arg to set_tod()
    tod_t tod = {
      .hours   = -3,
      .minutes = -5,
      .seconds = -7,
      .ispm    = -1,
    };                          // SHOULD NOT CHANGE
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    int ret = set_tod_from_secs( SECS, &tod );

    printf("returned: %d\n",ret);
    test_print_tod( tod );
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT);
    printf("\n");

}
returned: 1
tod = {
  .hours   = -3,
  .minutes = -5,
  .seconds = -7,
  .ispm    = -1,
}
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
#+END_SRC

** test_hybrid minutes-range
#+TESTY: program='./test_hybrid minutes-range'

#+BEGIN_SRC text
{
    // Tests whether set_display_bits_from_tod() checks
    // ranges and returns and error. Should return 1
    // and not change the bits integer.
    tod_t tod = {
      .hours   = 8,
      .minutes = 72,
      .seconds = 23,
      .ispm    = 1,
    };
    TIME_OF_DAY_SEC  = -1;      // should stay -1
    CLOCK_DISPLAY_PORT = -1;    // should stay -1

    // bits in array to check for correct movX
    int sentinels[] = {0xAABBCCDD, -1, 0xAABBCCDD};
    int *bits = &sentinels[1];
    int ret = set_display_bits_from_tod(tod, bits);
    
    printf("returned: %d\n",ret);
    printf("bits:               ");
    showbits( *bits ); printf("\n");
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
    printf("sentinels[0]: 0x%08X  // may change if\n",sentinels[0]); 
    printf("sentinels[2]: 0x%08X  // wrong movX used\n",sentinels[2]); 
}
returned: 1
bits:               11111111 11111111 11111111 11111111 
TIME_OF_DAY_SEC: -1
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
sentinels[0]: 0xAABBCCDD  // may change if
sentinels[2]: 0xAABBCCDD  // wrong movX used
#+END_SRC

** test_hybrid update-fails
#+TESTY: program='./test_hybrid update-fails'

#+BEGIN_SRC text
{
    // Tests whether clock_update() correctly fails on
    // bad seconds.
    TIME_OF_DAY_SEC  =   91234;
    CLOCK_DISPLAY_PORT = -1;

    int ret = clock_update();   // don't change DISPLAY

    printf("returned: %d\n",ret);
    printf("TIME_OF_DAY_SEC: %d\n",TIME_OF_DAY_SEC);
    printf("CLOCK_DISPLAY_PORT: ");
    showbits(CLOCK_DISPLAY_PORT); printf("\n");
}
returned: 1
TIME_OF_DAY_SEC: 91234
CLOCK_DISPLAY_PORT: 11111111 11111111 11111111 11111111 
#+END_SRC

* hybrid_main 12345 is 3:25am

#+TESTY: program='./hybrid_main 12345'
#+BEGIN_SRC text
TIME_OF_DAY_SEC set to: 12345
set_tod_from_secs( 12345, &tod );
tod is {       
  .hours   = 3
  .minutes = 25
  .seconds = 45
  .ispm    = 0
}              
Simulated time is: 03 : 25 : 45 am

Checking results for display bits
set_display_bits_from_tod(tod, &state);

state is:
bits:  00010000 00010011 11101101 11101101 

Running clock_update()

CLOCK_DISPLAY_PORT is:
bits:  00010000 00010011 11101101 11101101 

Clock Display:
         ~~   ~~   ~~          
           |o   | |            
         ~~   ~~   ~~          
AM         |o|       |         
         ~~   ~~   ~~          
#+END_SRC

* hybrid_main 24000 is 6:40am
#+TESTY: program='./hybrid_main 24000'

#+BEGIN_SRC text
TIME_OF_DAY_SEC set to: 24000
set_tod_from_secs( 24000, &tod );
tod is {       
  .hours   = 6
  .minutes = 40
  .seconds = 0
  .ispm    = 0
}              
Simulated time is: 06 : 40 : 00 am

Checking results for display bits
set_display_bits_from_tod(tod, &state);

state is:
bits:  00010000 00011111 01110011 00111111 

Running clock_update()

CLOCK_DISPLAY_PORT is:
bits:  00010000 00011111 01110011 00111111 

Clock Display:
         ~~        ~~          
        |   o|  | |  |         
         ~~   ~~               
AM      |  |o   | |  |         
         ~~        ~~          
#+END_SRC

* hybrid_main 66091 is 6:21pm
#+TESTY: program='./hybrid_main 66091'

#+BEGIN_SRC text
TIME_OF_DAY_SEC set to: 66091
set_tod_from_secs( 66091, &tod );
tod is {       
  .hours   = 6
  .minutes = 21
  .seconds = 31
  .ispm    = 1
}              
Simulated time is: 06 : 21 : 31 pm

Checking results for display bits
set_display_bits_from_tod(tod, &state);

state is:
bits:  00100000 00011111 01101101 10000110 

Running clock_update()

CLOCK_DISPLAY_PORT is:
bits:  00100000 00011111 01101101 10000110 

Clock Display:
         ~~   ~~               
        |   o   |    |         
         ~~   ~~               
        |  |o|       |         
PM       ~~   ~~               
#+END_SRC

* hybrid_main 42994 is 11:56am
#+TESTY: program='./hybrid_main 42994'

#+BEGIN_SRC text
TIME_OF_DAY_SEC set to: 42994
set_tod_from_secs( 42994, &tod );
tod is {       
  .hours   = 11
  .minutes = 56
  .seconds = 34
  .ispm    = 0
}              
Simulated time is: 11 : 56 : 34 am

Checking results for display bits
set_display_bits_from_tod(tod, &state);

state is:
bits:  00010000 11000001 10110110 11111101 

Running clock_update()

CLOCK_DISPLAY_PORT is:
bits:  00010000 11000001 10110110 11111101 

Clock Display:
              ~~   ~~          
      |    |o|    |            
              ~~   ~~          
AM    |    |o   | |  |         
              ~~   ~~          
#+END_SRC

* hybrid_main 80000 is 10:13pm
#+TESTY: program='./hybrid_main 80000'

#+BEGIN_SRC text
TIME_OF_DAY_SEC set to: 80000
set_tod_from_secs( 80000, &tod );
tod is {       
  .hours   = 10
  .minutes = 13
  .seconds = 20
  .ispm    = 1
}              
Simulated time is: 10 : 13 : 20 pm

Checking results for display bits
set_display_bits_from_tod(tod, &state);

state is:
bits:  00100000 11001111 11000011 01001111 

Running clock_update()

CLOCK_DISPLAY_PORT is:
bits:  00100000 11001111 11000011 01001111 

Clock Display:
         ~~        ~~          
      | |  |o   |    |         
                   ~~          
      | |  |o   |    |         
PM       ~~        ~~          
#+END_SRC

